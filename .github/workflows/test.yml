name: Django CI

on: [pull_request, push]
env:
    # Default
    DEBUG: ${{ secrets.DEBUG }}
    SECRET_KEY: ${{ secrets.SECRET_KEY }}
    DJANGO_ALLOWED_HOSTS: ${{ secrets.ACTION_DJANGO_ALLOWED_HOSTS }}
    CELERY_BROKER: ${{ secrets.CELERY_BROKER }}
    CELERY_BACKEND: ${{ secrets.CELERY_BACKEND }}
    # Docker images
    DOCKER_USER: ${{secrets.DOCKER_USER}}
    DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
    REGISTRY: docker.io
    WEB_IMAGE: ${{ secrets.WEB_IMAGE }}
    CELERY_IMAGE: ${{ secrets.CELERY_IMAGE }}
    BEAT_IMAGE: ${{ secrets.BEAT_IMAGE }}
    DASH_IMAGE: ${{ secrets.DASH_IMAGE }}
    NGINX_IMAGE: ${{ secrets.NGINX_IMAGE }}
    # Nginx proxy
    VIRTUAL_HOST: ${{secrets.VIRTUAL_HOST}}
    VIRTUAL_PORT: ${{secrets.VIRTUAL_PORT}}
    # let encrypted
    DEFAULT_EMAIL: ${{secrets.DEFAULT_EMAIL}}

jobs:
    test_project:
        runs-on: ubuntu-latest # operating system your code will run on
        steps:
            - uses: actions/checkout@v3
            - uses: actions/setup-python@v2
            - name: Run script file
              run: |
                  chmod +x ./apps/setup_env.sh
                  bash ./apps/setup_env.sh
                  cp ./apps/codeln3d/settings/base.ci.py ./apps/codeln3d/settings/base.py
            - run: cat ./apps/.env
            - run: pip install flake8
            - run: pip install setuptools
            - run: pip install -r apps/requirements.txt # install all our dependencies for the project
            - run: flake8 . # run flake8 test
            - run: |
                  cd apps/
                  python manage.py test

    push-image-to-docker-hub:  # job name
        runs-on: ubuntu-latest  # runner name : (ubuntu latest version) 
        needs: test_project
        steps:
        - uses: actions/checkout@v3 # first action : checkout source code
        - name: Create env file
          run: |
              chmod +x ./apps/setup_env.ci.sh
              bash ./apps/setup_env.ci.sh
        - name: docker login
          run: | # log into docker hub account
              docker login -u $DOCKER_USER -p $DOCKER_PASSWORD $REGISTRY
        - name: Pull Web and nginx image # push The image to the docker hub
          run: |
              docker pull push $WEB_IMAGE || true
              docker pull $CELERY_IMAGE || true
              docker pull $BEAT_IMAGE || true
              docker pull $DASH_IMAGE || true
              docker pull $NGINX_IMAGE || true
        - name: Build docker compose
          run: docker-compose -f docker-compose.ci.yml build
        - name: Push all images to Docker Hub
          run: |
              docker push $WEB_IMAGE
              docker push $CELERY_IMAGE
              docker push $BEAT_IMAGE
              docker push $DASH_IMAGE
              docker push $NGINX_IMAGE

    befor-deploy:
      name: Befor deploy
      runs-on: ubuntu-latest
      needs: push-image-to-docker-hub
      steps:
        - uses: actions/checkout@v3
        - name: Create env file
          run: |
            chmod +x ./apps/setup_env.ci.sh
            bash ./apps/setup_env.ci.sh
        - name: copy file via ssh key
          uses: appleboy/scp-action@v0.1.4
          with:
            host: ${{secrets.DEPLOY_PUBLIC_IP_ADDRESS}}
            username: ${{secrets.SERVER_USER}}
            key: ${{secrets.PRIVATE_KEY}}
            port: 22
            source: "./nginx, ./.env, ./.env.proxy-companion, ./docker-compose.prod.yml"
            target: "/${{secrets.SERVER_USER}}/project/"

    deploy:
      runs-on: ubuntu-latest  # Utilisez l'image Ubuntu par d√©faut
      needs: befor-deploy
      steps:
        - uses: actions/checkout@v3
        - name: docker login
          run: | # log into docker hub account
            docker login -u $DOCKER_USER -p $DOCKER_PASSWORD $REGISTRY
        - name: Deploy using ssh
          uses: appleboy/ssh-action@master
          with:
            host: ${{secrets.DEPLOY_PUBLIC_IP_ADDRESS}}
            username: ${{secrets.SERVER_USER}}
            key: ${{secrets.PRIVATE_KEY}}
            port: 22
            script: |
              cd /${{secrets.SERVER_USER}}/project/
              export $(cat .env | xargs)
              docker pull push $WEB_IMAGE
              docker pull $NGINX_IMAGE
              docker pull $CELERY_IMAGE
              docker pull $BEAT_IMAGE
              docker pull $DASH_IMAGE
              docker-compose -f docker-compose.prod.yml down || true
              docker rm -vf $(docker ps -aq) || true
              docker rmi -f $(docker images -aq) || true
              docker-compose -f docker-compose.prod.yml up -d